                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.6 #12539 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _event_loop
                                     13 	.globl _wait
                                     14 	.globl _printf
                                     15 	.globl _set_sprite_data
                                     16 	.globl _wait_vbl_done
                                     17 	.globl _joypad
                                     18 	.globl _delay
                                     19 	.globl _SmileToSurprised
                                     20 	.globl _sprite_constructor
                                     21 	.globl _sprite_setup
                                     22 	.globl _change_sprite_tile
                                     23 	.globl _animate_sprite
                                     24 	.globl _translate_sprite
                                     25 ;--------------------------------------------------------
                                     26 ; special function registers
                                     27 ;--------------------------------------------------------
                                     28 ;--------------------------------------------------------
                                     29 ; ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area _DATA
                                     32 ;--------------------------------------------------------
                                     33 ; ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area _INITIALIZED
      000000                         36 _SmileToSurprised::
      000000                         37 	.ds 96
                                     38 ;--------------------------------------------------------
                                     39 ; absolute external ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area _DABS (ABS)
                                     42 ;--------------------------------------------------------
                                     43 ; global & static initialisations
                                     44 ;--------------------------------------------------------
                                     45 	.area _HOME
                                     46 	.area _GSINIT
                                     47 	.area _GSFINAL
                                     48 	.area _GSINIT
                                     49 ;--------------------------------------------------------
                                     50 ; Home
                                     51 ;--------------------------------------------------------
                                     52 	.area _HOME
                                     53 	.area _HOME
                                     54 ;--------------------------------------------------------
                                     55 ; code
                                     56 ;--------------------------------------------------------
                                     57 	.area _CODE
                                     58 ;sprites.h:64: void sprite_constructor(Sprite *s, uint8_t index, uint8_t startingTile, uint8_t endTile, uint8_t xPos, uint8_t yPos, uint8_t fallSpeed, uint8_t moveSpeed) {
                                     59 ;	---------------------------------
                                     60 ; Function sprite_constructor
                                     61 ; ---------------------------------
      000000                         62 _sprite_constructor::
                                     63 ;sprites.h:65: s-> id = index;
      000000 F8 02                   64 	ldhl	sp,	#2
      000002 2A                      65 	ld	a, (hl+)
      000003 4F                      66 	ld	c, a
      000004 2A                      67 	ld	a, (hl+)
      000005 47                      68 	ld	b, a
                                     69 ;sprites.h:66: s-> initTile = startingTile;
      000006 2A                      70 	ld	a, (hl+)
      000007 02                      71 	ld	(bc), a
      000008 59                      72 	ld	e, c
      000009 50                      73 	ld	d, b
      00000A 13                      74 	inc	de
                                     75 ;sprites.h:67: s-> maxTile = endTile;
      00000B 2A                      76 	ld	a, (hl+)
      00000C 12                      77 	ld	(de), a
      00000D 59                      78 	ld	e, c
      00000E 50                      79 	ld	d, b
      00000F 13                      80 	inc	de
      000010 13                      81 	inc	de
                                     82 ;sprites.h:68: s-> x = xPos;
      000011 2A                      83 	ld	a, (hl+)
      000012 12                      84 	ld	(de), a
      000013 59                      85 	ld	e, c
      000014 50                      86 	ld	d, b
      000015 13                      87 	inc	de
      000016 13                      88 	inc	de
      000017 13                      89 	inc	de
      000018 7E                      90 	ld	a, (hl)
      000019 12                      91 	ld	(de), a
                                     92 ;sprites.h:69: s-> y = yPos;
      00001A 21 04 00                93 	ld	hl, #0x0004
      00001D 09                      94 	add	hl, bc
      00001E 5D                      95 	ld	e, l
      00001F 54                      96 	ld	d, h
      000020 F8 08                   97 	ldhl	sp,	#8
      000022 7E                      98 	ld	a, (hl)
      000023 12                      99 	ld	(de), a
                                    100 ;sprites.h:70: s-> gravity = fallSpeed;
      000024 21 05 00               101 	ld	hl, #0x0005
      000027 09                     102 	add	hl, bc
      000028 5D                     103 	ld	e, l
      000029 54                     104 	ld	d, h
      00002A F8 09                  105 	ldhl	sp,	#9
      00002C 7E                     106 	ld	a, (hl)
      00002D 12                     107 	ld	(de), a
                                    108 ;sprites.h:71: s-> velocity = moveSpeed;
      00002E 21 06 00               109 	ld	hl, #0x0006
      000031 09                     110 	add	hl, bc
      000032 4D                     111 	ld	c, l
      000033 44                     112 	ld	b, h
      000034 F8 0A                  113 	ldhl	sp,	#10
      000036 7E                     114 	ld	a, (hl)
      000037 02                     115 	ld	(bc), a
                                    116 ;sprites.h:72: } 
      000038 C9                     117 	ret
                                    118 ;sprites.h:77: void sprite_setup(Sprite *s, unsigned char pixels[]) {   // if sprite pixel data is used elsewhere, then use pixel_data(). If setup is only function which needs the pixel data array, pass that in directly
                                    119 ;	---------------------------------
                                    120 ; Function sprite_setup
                                    121 ; ---------------------------------
      000039                        122 _sprite_setup::
      000039 3B                     123 	dec	sp
                                    124 ;sprites.h:78: set_sprite_data(0, s->maxTile, pixels);    // (initial tile, final tile, sprite char array)
      00003A F8 03                  125 	ldhl	sp,	#3
      00003C 2A                     126 	ld	a, (hl+)
      00003D 4F                     127 	ld	c, a
      00003E 2A                     128 	ld	a, (hl+)
      00003F 47                     129 	ld	b, a
      000040 59                     130 	ld	e, c
      000041 50                     131 	ld	d, b
      000042 13                     132 	inc	de
      000043 13                     133 	inc	de
      000044 1A                     134 	ld	a, (de)
      000045 5E                     135 	ld	e, (hl)
      000046 23                     136 	inc	hl
      000047 56                     137 	ld	d, (hl)
      000048 D5                     138 	push	de
      000049 67                     139 	ld	h, a
      00004A 2E 00                  140 	ld	l, #0x00
      00004C E5                     141 	push	hl
      00004D CDr00r00               142 	call	_set_sprite_data
      000050 E8 04                  143 	add	sp, #4
                                    144 ;sprites.h:79: set_sprite_tile(0, s->initTile);                      // (sprite index, tile)
      000052 59                     145 	ld	e, c
      000053 50                     146 	ld	d, b
      000054 13                     147 	inc	de
      000055 1A                     148 	ld	a, (de)
      000056 F8 00                  149 	ldhl	sp,	#0
      000058 77                     150 	ld	(hl), a
                                    151 ;c:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      000059 11r02r00               152 	ld	de, #(_shadow_OAM + 2)
      00005C 7E                     153 	ld	a, (hl)
      00005D 12                     154 	ld	(de), a
                                    155 ;sprites.h:80: move_sprite(0, s->x, s->y);                     // (sprite index, x, y)
      00005E 21 04 00               156 	ld	hl, #0x0004
      000061 09                     157 	add	hl, bc
      000062 5E                     158 	ld	e, (hl)
      000063 03                     159 	inc	bc
      000064 03                     160 	inc	bc
      000065 03                     161 	inc	bc
      000066 0A                     162 	ld	a, (bc)
      000067 4F                     163 	ld	c, a
                                    164 ;c:/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
      000068 21r00r00               165 	ld	hl, #_shadow_OAM
                                    166 ;c:/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      00006B 7B                     167 	ld	a, e
      00006C 22                     168 	ld	(hl+), a
      00006D 71                     169 	ld	(hl), c
                                    170 ;sprites.h:81: SHOW_SPRITES;
      00006E F0r00                  171 	ldh	a, (_LCDC_REG + 0)
      000070 F6 02                  172 	or	a, #0x02
      000072 E0r00                  173 	ldh	(_LCDC_REG + 0), a
                                    174 ;sprites.h:82: }
      000074 33                     175 	inc	sp
      000075 C9                     176 	ret
                                    177 ;sprites.h:104: void change_sprite_tile(Sprite *s) {
                                    178 ;	---------------------------------
                                    179 ; Function change_sprite_tile
                                    180 ; ---------------------------------
      000076                        181 _change_sprite_tile::
      000076 E8 FC                  182 	add	sp, #-4
                                    183 ;sprites.h:106: uint8_t currentTile = get_sprite_tile(s->id);
      000078 F8 06                  184 	ldhl	sp,	#6
      00007A 2A                     185 	ld	a, (hl+)
      00007B 4F                     186 	ld	c, a
      00007C 46                     187 	ld	b, (hl)
      00007D 0A                     188 	ld	a, (bc)
      00007E F8 00                  189 	ldhl	sp,	#0
      000080 77                     190 	ld	(hl), a
      000081 6E                     191 	ld	l, (hl)
                                    192 ;	spillPairReg hl
                                    193 ;	spillPairReg hl
      000082 26 00                  194 	ld	h, #0x00
                                    195 ;	spillPairReg hl
                                    196 ;	spillPairReg hl
      000084 29                     197 	add	hl, hl
      000085 29                     198 	add	hl, hl
      000086 11r00r00               199 	ld	de, #_shadow_OAM
      000089 19                     200 	add	hl, de
      00008A 23                     201 	inc	hl
      00008B 23                     202 	inc	hl
      00008C 7E                     203 	ld	a, (hl)
      00008D F8 01                  204 	ldhl	sp,	#1
      00008F 77                     205 	ld	(hl), a
                                    206 ;sprites.h:107: if (currentTile < s->maxTile - 1) {
      000090 03                     207 	inc	bc
      000091 03                     208 	inc	bc
      000092 0A                     209 	ld	a, (bc)
      000093 4F                     210 	ld	c, a
      000094 06 00                  211 	ld	b, #0x00
      000096 0B                     212 	dec	bc
      000097 F8 01                  213 	ldhl	sp,	#1
      000099 2A                     214 	ld	a, (hl+)
      00009A 22                     215 	ld	(hl+), a
      00009B AF                     216 	xor	a, a
      00009C 32                     217 	ld	(hl-), a
      00009D 2A                     218 	ld	a, (hl+)
      00009E 91                     219 	sub	a, c
      00009F 7E                     220 	ld	a, (hl)
      0000A0 98                     221 	sbc	a, b
      0000A1 56                     222 	ld	d, (hl)
      0000A2 78                     223 	ld	a, b
      0000A3 CB 7F                  224 	bit	7,a
      0000A5 28 07                  225 	jr	Z, 00114$
      0000A7 CB 7A                  226 	bit	7, d
      0000A9 20 08                  227 	jr	NZ, 00115$
      0000AB BF                     228 	cp	a, a
      0000AC 18 05                  229 	jr	00115$
      0000AE                        230 00114$:
      0000AE CB 7A                  231 	bit	7, d
      0000B0 28 01                  232 	jr	Z, 00115$
      0000B2 37                     233 	scf
      0000B3                        234 00115$:
      0000B3 30 13                  235 	jr	NC, 00102$
                                    236 ;sprites.h:108: set_sprite_tile(s->id, ++currentTile);
      0000B5 F8 01                  237 	ldhl	sp,	#1
                                    238 ;c:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      0000B7 3A                     239 	ld	a, (hl-)
      0000B8 4F                     240 	ld	c, a
      0000B9 0C                     241 	inc	c
      0000BA 11r00r00               242 	ld	de, #_shadow_OAM+0
      0000BD 6E                     243 	ld	l, (hl)
      0000BE 26 00                  244 	ld	h, #0x00
      0000C0 29                     245 	add	hl, hl
      0000C1 29                     246 	add	hl, hl
      0000C2 19                     247 	add	hl, de
      0000C3 23                     248 	inc	hl
      0000C4 23                     249 	inc	hl
      0000C5 71                     250 	ld	(hl), c
                                    251 ;sprites.h:108: set_sprite_tile(s->id, ++currentTile);
      0000C6 18 0F                  252 	jr	00107$
      0000C8                        253 00102$:
                                    254 ;c:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      0000C8 F8 00                  255 	ldhl	sp,	#0
      0000CA 6E                     256 	ld	l, (hl)
      0000CB 26 00                  257 	ld	h, #0x00
      0000CD 29                     258 	add	hl, hl
      0000CE 29                     259 	add	hl, hl
      0000CF 11r00r00               260 	ld	de, #_shadow_OAM
      0000D2 19                     261 	add	hl, de
      0000D3 23                     262 	inc	hl
      0000D4 23                     263 	inc	hl
      0000D5 36 00                  264 	ld	(hl), #0x00
                                    265 ;sprites.h:111: set_sprite_tile(s->id, 0);
      0000D7                        266 00107$:
                                    267 ;sprites.h:113: }
      0000D7 E8 04                  268 	add	sp, #4
      0000D9 C9                     269 	ret
                                    270 ;sprites.h:117: void animate_sprite(Sprite *s) {
                                    271 ;	---------------------------------
                                    272 ; Function animate_sprite
                                    273 ; ---------------------------------
      0000DA                        274 _animate_sprite::
      0000DA E8 FC                  275 	add	sp, #-4
                                    276 ;sprites.h:118: for (uint8_t tileIdx = 0; tileIdx < s->maxTile; tileIdx++) {
      0000DC F8 06                  277 	ldhl	sp,	#6
      0000DE 2A                     278 	ld	a, (hl+)
      0000DF 4F                     279 	ld	c, a
      0000E0 46                     280 	ld	b, (hl)
      0000E1 21 02 00               281 	ld	hl, #0x0002
      0000E4 09                     282 	add	hl, bc
      0000E5 33                     283 	inc	sp
      0000E6 33                     284 	inc	sp
      0000E7 E5                     285 	push	hl
      0000E8 F8 03                  286 	ldhl	sp,	#3
      0000EA 36 00                  287 	ld	(hl), #0x00
      0000EC                        288 00104$:
      0000EC D1                     289 	pop	de
      0000ED D5                     290 	push	de
      0000EE 1A                     291 	ld	a, (de)
      0000EF F8 02                  292 	ldhl	sp,	#2
      0000F1 22                     293 	ld	(hl+), a
      0000F2 3A                     294 	ld	a, (hl-)
      0000F3 96                     295 	sub	a, (hl)
      0000F4 30 22                  296 	jr	NC, 00106$
                                    297 ;sprites.h:119: set_sprite_tile(s->id, tileIdx);
      0000F6 0A                     298 	ld	a, (bc)
      0000F7 5F                     299 	ld	e, a
                                    300 ;c:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      0000F8 26 00                  301 	ld	h, #0x00
                                    302 ;	spillPairReg hl
                                    303 ;	spillPairReg hl
      0000FA 6B                     304 	ld	l, e
      0000FB 29                     305 	add	hl, hl
      0000FC 29                     306 	add	hl, hl
      0000FD 11r00r00               307 	ld	de, #_shadow_OAM
      000100 19                     308 	add	hl, de
      000101 23                     309 	inc	hl
      000102 23                     310 	inc	hl
      000103 5D                     311 	ld	e, l
      000104 54                     312 	ld	d, h
      000105 F8 03                  313 	ldhl	sp,	#3
      000107 7E                     314 	ld	a, (hl)
      000108 12                     315 	ld	(de), a
                                    316 ;sprites.h:120: delay(350);
      000109 C5                     317 	push	bc
      00010A 11 5E 01               318 	ld	de, #0x015e
      00010D D5                     319 	push	de
      00010E CDr00r00               320 	call	_delay
      000111 E1                     321 	pop	hl
      000112 C1                     322 	pop	bc
                                    323 ;sprites.h:118: for (uint8_t tileIdx = 0; tileIdx < s->maxTile; tileIdx++) {
      000113 F8 03                  324 	ldhl	sp,	#3
      000115 34                     325 	inc	(hl)
      000116 18 D4                  326 	jr	00104$
      000118                        327 00106$:
                                    328 ;sprites.h:122: }
      000118 E8 04                  329 	add	sp, #4
      00011A C9                     330 	ret
                                    331 ;sprites.h:124: void translate_sprite(Sprite *s) {
                                    332 ;	---------------------------------
                                    333 ; Function translate_sprite
                                    334 ; ---------------------------------
      00011B                        335 _translate_sprite::
                                    336 ;sprites.h:126: switch(joypad()) {
      00011B CDr00r00               337 	call	_joypad
      00011E 4B                     338 	ld	c, e
                                    339 ;sprites.h:128: scroll_sprite(s->id, -1 * SPRITE_SCROLL_SPEED, 0);
      00011F F8 02                  340 	ldhl	sp,	#2
      000121 2A                     341 	ld	a, (hl+)
      000122 5F                     342 	ld	e, a
      000123 56                     343 	ld	d, (hl)
                                    344 ;sprites.h:126: switch(joypad()) {
      000124 79                     345 	ld	a, c
      000125 3D                     346 	dec	a
      000126 28 27                  347 	jr	Z, 00102$
      000128 79                     348 	ld	a,c
      000129 FE 02                  349 	cp	a,#0x02
      00012B 28 0A                  350 	jr	Z, 00101$
      00012D FE 04                  351 	cp	a,#0x04
      00012F 28 35                  352 	jr	Z, 00103$
      000131 D6 08                  353 	sub	a, #0x08
      000133 28 49                  354 	jr	Z, 00104$
      000135 18 5D                  355 	jr	00105$
                                    356 ;sprites.h:127: case J_LEFT:
      000137                        357 00101$:
                                    358 ;sprites.h:128: scroll_sprite(s->id, -1 * SPRITE_SCROLL_SPEED, 0);
      000137 1A                     359 	ld	a, (de)
      000138 4F                     360 	ld	c, a
                                    361 ;c:/gbdk/include/gb/gb.h:1536: OAM_item_t * itm = &shadow_OAM[nb];
      000139 26 00                  362 	ld	h, #0x00
                                    363 ;	spillPairReg hl
                                    364 ;	spillPairReg hl
      00013B 69                     365 	ld	l, c
      00013C 29                     366 	add	hl, hl
      00013D 29                     367 	add	hl, hl
      00013E 01r00r00               368 	ld	bc, #_shadow_OAM
      000141 09                     369 	add	hl, bc
                                    370 ;c:/gbdk/include/gb/gb.h:1537: itm->y+=y, itm->x+=x;
      000142 7E                     371 	ld	a, (hl)
      000143 22                     372 	ld	(hl+), a
      000144 7E                     373 	ld	a, (hl)
      000145 C6 F6                  374 	add	a, #0xf6
      000147 77                     375 	ld	(hl), a
                                    376 ;sprites.h:129: change_sprite_tile(s);
      000148 D5                     377 	push	de
      000149 CDr76r00               378 	call	_change_sprite_tile
      00014C E1                     379 	pop	hl
                                    380 ;sprites.h:130: break;
      00014D 18 45                  381 	jr	00105$
                                    382 ;sprites.h:131: case J_RIGHT:
      00014F                        383 00102$:
                                    384 ;sprites.h:132: scroll_sprite(s->id, 1 * SPRITE_SCROLL_SPEED, 0);
      00014F 1A                     385 	ld	a, (de)
                                    386 ;c:/gbdk/include/gb/gb.h:1536: OAM_item_t * itm = &shadow_OAM[nb];
      000150 6F                     387 	ld	l, a
                                    388 ;	spillPairReg hl
                                    389 ;	spillPairReg hl
      000151 26 00                  390 	ld	h, #0x00
                                    391 ;	spillPairReg hl
                                    392 ;	spillPairReg hl
      000153 29                     393 	add	hl, hl
      000154 29                     394 	add	hl, hl
      000155 01r00r00               395 	ld	bc, #_shadow_OAM
      000158 09                     396 	add	hl, bc
                                    397 ;c:/gbdk/include/gb/gb.h:1537: itm->y+=y, itm->x+=x;
      000159 7E                     398 	ld	a, (hl)
      00015A 22                     399 	ld	(hl+), a
      00015B 7E                     400 	ld	a, (hl)
      00015C C6 0A                  401 	add	a, #0x0a
      00015E 77                     402 	ld	(hl), a
                                    403 ;sprites.h:133: change_sprite_tile(s);
      00015F D5                     404 	push	de
      000160 CDr76r00               405 	call	_change_sprite_tile
      000163 E1                     406 	pop	hl
                                    407 ;sprites.h:134: break;
      000164 18 2E                  408 	jr	00105$
                                    409 ;sprites.h:135: case J_UP:
      000166                        410 00103$:
                                    411 ;sprites.h:136: scroll_sprite(s->id, 0, -1 * SPRITE_SCROLL_SPEED);
      000166 1A                     412 	ld	a, (de)
      000167 4F                     413 	ld	c, a
                                    414 ;c:/gbdk/include/gb/gb.h:1536: OAM_item_t * itm = &shadow_OAM[nb];
      000168 26 00                  415 	ld	h, #0x00
                                    416 ;	spillPairReg hl
                                    417 ;	spillPairReg hl
      00016A 69                     418 	ld	l, c
      00016B 29                     419 	add	hl, hl
      00016C 29                     420 	add	hl, hl
      00016D 01r00r00               421 	ld	bc, #_shadow_OAM
      000170 09                     422 	add	hl, bc
                                    423 ;c:/gbdk/include/gb/gb.h:1537: itm->y+=y, itm->x+=x;
      000171 7E                     424 	ld	a, (hl)
      000172 C6 F6                  425 	add	a, #0xf6
      000174 22                     426 	ld	(hl+), a
      000175 7E                     427 	ld	a, (hl)
      000176 77                     428 	ld	(hl), a
                                    429 ;sprites.h:137: change_sprite_tile(s);
      000177 D5                     430 	push	de
      000178 CDr76r00               431 	call	_change_sprite_tile
      00017B E1                     432 	pop	hl
                                    433 ;sprites.h:138: break;
      00017C 18 16                  434 	jr	00105$
                                    435 ;sprites.h:139: case J_DOWN:
      00017E                        436 00104$:
                                    437 ;sprites.h:140: scroll_sprite(s->id, 0, 1 * SPRITE_SCROLL_SPEED);
      00017E 1A                     438 	ld	a, (de)
      00017F 4F                     439 	ld	c, a
                                    440 ;c:/gbdk/include/gb/gb.h:1536: OAM_item_t * itm = &shadow_OAM[nb];
      000180 26 00                  441 	ld	h, #0x00
                                    442 ;	spillPairReg hl
                                    443 ;	spillPairReg hl
      000182 69                     444 	ld	l, c
      000183 29                     445 	add	hl, hl
      000184 29                     446 	add	hl, hl
      000185 01r00r00               447 	ld	bc, #_shadow_OAM
      000188 09                     448 	add	hl, bc
                                    449 ;c:/gbdk/include/gb/gb.h:1537: itm->y+=y, itm->x+=x;
      000189 7E                     450 	ld	a, (hl)
      00018A C6 0A                  451 	add	a, #0x0a
      00018C 22                     452 	ld	(hl+), a
      00018D 7E                     453 	ld	a, (hl)
      00018E 77                     454 	ld	(hl), a
                                    455 ;sprites.h:141: change_sprite_tile(s);
      00018F D5                     456 	push	de
      000190 CDr76r00               457 	call	_change_sprite_tile
      000193 E1                     458 	pop	hl
                                    459 ;sprites.h:143: }
      000194                        460 00105$:
                                    461 ;sprites.h:144: delay(100);
      000194 11 64 00               462 	ld	de, #0x0064
      000197 D5                     463 	push	de
      000198 CDr00r00               464 	call	_delay
      00019B E1                     465 	pop	hl
                                    466 ;sprites.h:145: }
      00019C C9                     467 	ret
                                    468 ;main.c:33: void wait(UINT8 numloops){
                                    469 ;	---------------------------------
                                    470 ; Function wait
                                    471 ; ---------------------------------
      00019D                        472 _wait::
                                    473 ;main.c:35: for(i = 0; i < numloops; i++){
      00019D 0E 00                  474 	ld	c, #0x00
      00019F                        475 00103$:
      00019F 79                     476 	ld	a, c
      0001A0 F8 02                  477 	ldhl	sp,	#2
      0001A2 96                     478 	sub	a, (hl)
      0001A3 D0                     479 	ret	NC
                                    480 ;main.c:36: wait_vbl_done();
      0001A4 CDr00r00               481 	call	_wait_vbl_done
                                    482 ;main.c:35: for(i = 0; i < numloops; i++){
      0001A7 0C                     483 	inc	c
                                    484 ;main.c:38: }
      0001A8 18 F5                  485 	jr	00103$
                                    486 ;main.c:44: void event_loop() {
                                    487 ;	---------------------------------
                                    488 ; Function event_loop
                                    489 ; ---------------------------------
      0001AA                        490 _event_loop::
                                    491 ;main.c:47: while(1) {
      0001AA                        492 00102$:
                                    493 ;main.c:49: translate_sprite(0);
      0001AA 11 00 00               494 	ld	de, #0x0000
      0001AD D5                     495 	push	de
      0001AE CDr1Br01               496 	call	_translate_sprite
      0001B1 E1                     497 	pop	hl
                                    498 ;main.c:53: }
      0001B2 18 F6                  499 	jr	00102$
                                    500 ;main.c:55: void main() {
                                    501 ;	---------------------------------
                                    502 ; Function main
                                    503 ; ---------------------------------
      0001B4                        504 _main::
      0001B4 E8 F9                  505 	add	sp, #-7
                                    506 ;main.c:59: guyPtr = &guy;           // Assign pointer to object
      0001B6 F8 00                  507 	ldhl	sp,	#0
      0001B8 4D                     508 	ld	c, l
      0001B9 44                     509 	ld	b, h
                                    510 ;main.c:61: sprite_constructor(guyPtr, 0, 0, 5, 84, 78, 0, 10);
      0001BA C5                     511 	push	bc
      0001BB 3E 0A                  512 	ld	a, #0x0a
      0001BD F5                     513 	push	af
      0001BE 33                     514 	inc	sp
      0001BF 21 4E 00               515 	ld	hl, #0x4e
      0001C2 E5                     516 	push	hl
      0001C3 21 05 54               517 	ld	hl, #0x5405
      0001C6 E5                     518 	push	hl
      0001C7 AF                     519 	xor	a, a
      0001C8 0F                     520 	rrca
      0001C9 F5                     521 	push	af
      0001CA C5                     522 	push	bc
      0001CB CDr00r00               523 	call	_sprite_constructor
      0001CE E8 09                  524 	add	sp, #9
      0001D0 11rE9r01               525 	ld	de, #___str_0
      0001D3 D5                     526 	push	de
      0001D4 CDr00r00               527 	call	_printf
      0001D7 E1                     528 	pop	hl
      0001D8 C1                     529 	pop	bc
                                    530 ;main.c:64: sprite_setup(guyPtr, SmileToSurprised);
      0001D9 11r00r00               531 	ld	de, #_SmileToSurprised
      0001DC D5                     532 	push	de
      0001DD C5                     533 	push	bc
      0001DE CDr39r00               534 	call	_sprite_setup
      0001E1 E8 04                  535 	add	sp, #4
                                    536 ;main.c:65: event_loop();
      0001E3 CDrAAr01               537 	call	_event_loop
                                    538 ;main.c:66: }
      0001E6 E8 07                  539 	add	sp, #7
      0001E8 C9                     540 	ret
      0001E9                        541 ___str_0:
      0001E9 4D 79 20 66 69 72 73   542 	.ascii "My first "
             74 20
      0001F2 0A                     543 	.db 0x0a
      0001F3 47 61 6D 65 42 6F 79   544 	.ascii "GameBoy game!"
             20 67 61 6D 65 21
      000200 00                     545 	.db 0x00
                                    546 	.area _CODE
                                    547 	.area _INITIALIZER
      000000                        548 __xinit__SmileToSurprised:
      000000 3C                     549 	.db #0x3c	; 60
      000001 24                     550 	.db #0x24	; 36
      000002 5A                     551 	.db #0x5a	; 90	'Z'
      000003 7E                     552 	.db #0x7e	; 126
      000004 81                     553 	.db #0x81	; 129
      000005 7E                     554 	.db #0x7e	; 126
      000006 A5                     555 	.db #0xa5	; 165
      000007 7E                     556 	.db #0x7e	; 126
      000008 81                     557 	.db #0x81	; 129
      000009 7E                     558 	.db #0x7e	; 126
      00000A C3                     559 	.db #0xc3	; 195
      00000B 7E                     560 	.db #0x7e	; 126
      00000C 7E                     561 	.db #0x7e	; 126
      00000D 3C                     562 	.db #0x3c	; 60
      00000E 3C                     563 	.db #0x3c	; 60
      00000F 00                     564 	.db #0x00	; 0
      000010 3C                     565 	.db #0x3c	; 60
      000011 00                     566 	.db #0x00	; 0
      000012 66                     567 	.db #0x66	; 102	'f'
      000013 7E                     568 	.db #0x7e	; 126
      000014 81                     569 	.db #0x81	; 129
      000015 7E                     570 	.db #0x7e	; 126
      000016 A5                     571 	.db #0xa5	; 165
      000017 7E                     572 	.db #0x7e	; 126
      000018 81                     573 	.db #0x81	; 129
      000019 7E                     574 	.db #0x7e	; 126
      00001A 81                     575 	.db #0x81	; 129
      00001B 7E                     576 	.db #0x7e	; 126
      00001C 7E                     577 	.db #0x7e	; 126
      00001D 3C                     578 	.db #0x3c	; 60
      00001E 3C                     579 	.db #0x3c	; 60
      00001F 00                     580 	.db #0x00	; 0
      000020 3C                     581 	.db #0x3c	; 60
      000021 24                     582 	.db #0x24	; 36
      000022 42                     583 	.db #0x42	; 66	'B'
      000023 7E                     584 	.db #0x7e	; 126
      000024 81                     585 	.db #0x81	; 129
      000025 7E                     586 	.db #0x7e	; 126
      000026 A5                     587 	.db #0xa5	; 165
      000027 7E                     588 	.db #0x7e	; 126
      000028 81                     589 	.db #0x81	; 129
      000029 7E                     590 	.db #0x7e	; 126
      00002A 81                     591 	.db #0x81	; 129
      00002B 7E                     592 	.db #0x7e	; 126
      00002C 5A                     593 	.db #0x5a	; 90	'Z'
      00002D 3C                     594 	.db #0x3c	; 60
      00002E 3C                     595 	.db #0x3c	; 60
      00002F 00                     596 	.db #0x00	; 0
      000030 3C                     597 	.db #0x3c	; 60
      000031 24                     598 	.db #0x24	; 36
      000032 42                     599 	.db #0x42	; 66	'B'
      000033 7E                     600 	.db #0x7e	; 126
      000034 A5                     601 	.db #0xa5	; 165
      000035 7E                     602 	.db #0x7e	; 126
      000036 A5                     603 	.db #0xa5	; 165
      000037 7E                     604 	.db #0x7e	; 126
      000038 81                     605 	.db #0x81	; 129
      000039 7E                     606 	.db #0x7e	; 126
      00003A 81                     607 	.db #0x81	; 129
      00003B 7E                     608 	.db #0x7e	; 126
      00003C 5A                     609 	.db #0x5a	; 90	'Z'
      00003D 3C                     610 	.db #0x3c	; 60
      00003E 3C                     611 	.db #0x3c	; 60
      00003F 00                     612 	.db #0x00	; 0
      000040 7E                     613 	.db #0x7e	; 126
      000041 66                     614 	.db #0x66	; 102	'f'
      000042 81                     615 	.db #0x81	; 129
      000043 FF                     616 	.db #0xff	; 255
      000044 A5                     617 	.db #0xa5	; 165
      000045 7E                     618 	.db #0x7e	; 126
      000046 A5                     619 	.db #0xa5	; 165
      000047 7E                     620 	.db #0x7e	; 126
      000048 81                     621 	.db #0x81	; 129
      000049 7E                     622 	.db #0x7e	; 126
      00004A 81                     623 	.db #0x81	; 129
      00004B 7E                     624 	.db #0x7e	; 126
      00004C 5A                     625 	.db #0x5a	; 90	'Z'
      00004D 3C                     626 	.db #0x3c	; 60
      00004E 3C                     627 	.db #0x3c	; 60
      00004F 00                     628 	.db #0x00	; 0
      000050 7E                     629 	.db #0x7e	; 126
      000051 66                     630 	.db #0x66	; 102	'f'
      000052 81                     631 	.db #0x81	; 129
      000053 FF                     632 	.db #0xff	; 255
      000054 A5                     633 	.db #0xa5	; 165
      000055 7E                     634 	.db #0x7e	; 126
      000056 A5                     635 	.db #0xa5	; 165
      000057 7E                     636 	.db #0x7e	; 126
      000058 81                     637 	.db #0x81	; 129
      000059 7E                     638 	.db #0x7e	; 126
      00005A 99                     639 	.db #0x99	; 153
      00005B 7E                     640 	.db #0x7e	; 126
      00005C 5A                     641 	.db #0x5a	; 90	'Z'
      00005D 3C                     642 	.db #0x3c	; 60
      00005E 3C                     643 	.db #0x3c	; 60
      00005F 00                     644 	.db #0x00	; 0
                                    645 	.area _CABS (ABS)
