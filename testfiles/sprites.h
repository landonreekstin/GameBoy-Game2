/*

 SPRITES.H

 Include File.

 Info:
  Form                 : All tiles as one unit.
  Format               : Gameboy 4 color.
  Compression          : None.
  Counter              : None.
  Tile size            : 8 x 8
  Tiles                : 0 to 5

  Palette colors       : None.
  SGB Palette          : None.
  CGB Palette          : None.

  Convert to metatiles : No.

 This file was generated by GBTD v2.2

*/
#include <gb/gb.h>
#include <stdio.h>
#include <stdint.h>


/* Bank of tiles. */
#define SmileToSurprisedBank 0
/* Start of tile array. */
extern unsigned char SmileToSurprised[];

/* Sprite functions */
#define SPRITE_SCROLL_SPEED 10

// ------------ Sprites ----------------
typedef struct {
  uint8_t id;
  uint8_t initTile;
  uint8_t maxTile;
  uint8_t x;
  uint8_t y;
  uint8_t gravity;
  uint8_t velocity;
} Sprite;

// function prototypes
void change_sprite_tile(Sprite *s);
void animate_sprite(Sprite *s);
void translate_sprite(Sprite *s);
void sprite_setup(Sprite *s, unsigned char pixels[]);
void sprite_constructor(Sprite *s, uint8_t index, uint8_t startingTile, uint8_t endTile, uint8_t xPos, uint8_t yPos, uint8_t fallSpeed, uint8_t moveSpeed);

/** Returns a new sprite instance with the attributes provided.
 * @param s struct instance to initiate
 * @param index idx of the sprite. Sprite indexes increase from 0 to 39 when a new sprite is created and stored in the EOM
 * @param startingTile first tile idx to load
 * @param endTile last tile idx to load
 * @param xPos initial x coordinate
 * @param yPos initial y coordinate
 * @param fallSpeed decrease in downward velocity per screen refresh
 * @param moveSpeed horizontal or planar sprite scroll speed */
void sprite_constructor(Sprite *s, uint8_t index, uint8_t startingTile, uint8_t endTile, uint8_t xPos, uint8_t yPos, uint8_t fallSpeed, uint8_t moveSpeed) {
    s-> id = index;
    s-> initTile = startingTile;
    s-> maxTile = endTile;
    s-> x = xPos;
    s-> y = yPos;
    s-> gravity = fallSpeed;
    s-> velocity = moveSpeed;
} 

/** Loads sprite pixel data, sets initial tile and position
 * @param s The sprite struct to setup
 * @param pixels The sprite.c pixel data char array to load to the sprite */
void sprite_setup(Sprite *s, unsigned char pixels[]) {   // if sprite pixel data is used elsewhere, then use pixel_data(). If setup is only function which needs the pixel data array, pass that in directly
    set_sprite_data(0, s->maxTile, pixels);    // (initial tile, final tile, sprite char array)
    set_sprite_tile(0, s->initTile);                      // (sprite index, tile)
    move_sprite(0, s->x, s->y);                     // (sprite index, x, y)
    SHOW_SPRITES;
}

/** Returns the contents from the sprites.c pixel data arrays as a dynamically allocated array.
 *  @param pixelArr the sprites.c file pixel data array */
/*char* pixel_data(unsigned char pixelArr[]) {
    char* dynArrPtr;

    size_t n = sizeof(dynArrPtr)/sizeof(dynArrPtr[0]);

    dynArrPtr = calloc(n, sizeof(double) );

    for (int i = 0; i < n; i++ ) {
   	  *(dynArrPtr + i) = pixelData[i];
    }

    return dynArrPtr;
}
*/

/** Changes current sprite tile to the next in the char array.
 *  @param maxTile  the max tile index of the sprite
 *  @param sprite   index of the sprite to change */
void change_sprite_tile(Sprite *s) {
    //Sprite s = &ps;
    uint8_t currentTile = get_sprite_tile(s->id);
    if (currentTile < s->maxTile - 1) {
        set_sprite_tile(s->id, ++currentTile);
    }
    else {
        set_sprite_tile(s->id, 0);
    }
}

/** Loops through sprite tiles for a given sprite.
 * @param sprite   index of the sprite to animate */
void animate_sprite(Sprite *s) {
    for (uint8_t tileIdx = 0; tileIdx < s->maxTile; tileIdx++) {
        set_sprite_tile(s->id, tileIdx);
        delay(350);
    }
}

void translate_sprite(Sprite *s) {
    
    switch(joypad()) {
        case J_LEFT:
            scroll_sprite(s->id, -1 * SPRITE_SCROLL_SPEED, 0);
            change_sprite_tile(s);
            break;
        case J_RIGHT:
            scroll_sprite(s->id, 1 * SPRITE_SCROLL_SPEED, 0);
            change_sprite_tile(s);
            break;
        case J_UP:
            scroll_sprite(s->id, 0, -1 * SPRITE_SCROLL_SPEED);
            change_sprite_tile(s);
            break;
        case J_DOWN:
            scroll_sprite(s->id, 0, 1 * SPRITE_SCROLL_SPEED);
            change_sprite_tile(s);
            break;
    }
    delay(100);
}

/* End of SPRITES.H */
